### Eclipse Workspace Patch 1.0
#P unicorn
Index: deploy/node_modules/tianma-unicorn/lib/compiler.js
===================================================================
--- deploy/node_modules/tianma-unicorn/lib/compiler.js	(revision 729031)
+++ deploy/node_modules/tianma-unicorn/lib/compiler.js	(working copy)
@@ -55,11 +55,12 @@
 				});
 			},
 			writer: function (file, callback) {
-				if (file.data) {
-					config.cache[file.pathname] = file.data.toString('binary');
-				}
+                if (file.data) {
+                    config.cache[file.pathname] = file.data.toString('binary');
+                }
 				callback();
-			}
+			},
+            mtime: config.mtime
 		});
 
 	if (config.mode in MOUNT) {
Index: deploy/node_modules/tianma-unicorn/package.json
===================================================================
--- deploy/node_modules/tianma-unicorn/package.json	(revision 729031)
+++ deploy/node_modules/tianma-unicorn/package.json	(working copy)
@@ -1,35 +1,21 @@
 {
-  "name": "tianma-unicorn",
-  "description": "The Pegasus module for Unicorn System.",
-  "keywords": [
-    "unicorn",
-    "tianma"
-  ],
-  "repository": {
-    "type": "git",
-    "url": "https://github.com/nqdeng/tianma-unicorn.git"
-  },
-  "author": {
-    "name": "Nanqiao Deng",
-    "email": "nqdeng@gmail.com"
-  },
-  "version": "1.0.9",
-  "engines": {
-    "node": ">=0.10.0"
-  },
-  "dependencies": {
-    "ucc": "2.0.x"
-  },
-  "main": "lib/index.js",
-  "readme": "tianma-unicorn\r\n==============\r\n\r\nThe Pegasus module for Unicorn System.",
-  "readmeFilename": "README.md",
-  "bugs": {
-    "url": "https://github.com/nqdeng/tianma-unicorn/issues"
-  },
-  "_id": "tianma-unicorn@1.0.9",
-  "dist": {
-    "shasum": "c9d622859435db0dbd660ce4177172be8c550591"
-  },
-  "_from": "tianma-unicorn@1.0.9",
-  "_resolved": "https://registry.npmjs.org/tianma-unicorn/-/tianma-unicorn-1.0.9.tgz"
-}
+	"name": "tianma-unicorn",
+	"description": "The Pegasus module for Unicorn System.",
+	"keywords": [
+		"unicorn",
+		"tianma"
+	],
+	"repository": {
+		"type": "git",
+		"url": "https://github.com/nqdeng/tianma-unicorn.git"
+	},
+	"author": "Nanqiao Deng <nqdeng@gmail.com>",
+	"version": "1.0.11",
+	"engines": {
+		"node": ">=0.10.0"
+	},
+	"dependencies": {
+		"ucc": "2.0.x"
+  	},
+	"main": "lib/index.js"
+}
\ No newline at end of file
Index: deploy/node_modules/tianma-unicorn/lib/source.js
===================================================================
--- deploy/node_modules/tianma-unicorn/lib/source.js	(revision 729031)
+++ deploy/node_modules/tianma-unicorn/lib/source.js	(working copy)
@@ -147,7 +147,7 @@
 				cFile.read(self._expand(url.pathnames, url.type), function (files) {
 					files.forEach(function (file) {
 						file.data = file.data.toString('binary');
-						mtimes.push(file.mtime);
+						mtimes.push(self._meta[file.pathname].mtime || Date.now());
 					});
 
 					mtime = new Date(Math.max.apply(Math, mtimes));
Index: deploy/node_modules/tianma-unicorn/lib/source-jit.js
===================================================================
--- deploy/node_modules/tianma-unicorn/lib/source-jit.js	(revision 729031)
+++ deploy/node_modules/tianma-unicorn/lib/source-jit.js	(working copy)
@@ -49,7 +49,8 @@
 					modules: options.modules,
 					cache: cache,
 					loader: load,
-					mode: config.mode
+					mode: config.mode,
+                    mtime: Date.now()
 				});
 
 				c.compile(GLOBAL_FILE, function (file) {
@@ -58,7 +59,8 @@
 							dataHash: file.meta.dataHash.toString(16),
 							depsHash: file.meta.depsHash.toString(16),
 							nameHash: file.meta.nameHash.toString(16),
-							requires: file.meta.requires
+							requires: file.meta.requires,
+                            mtime: file.meta.mtime
 						};
 					}
 					callback(c);
@@ -88,7 +90,8 @@
 											dataHash: file.meta.dataHash.toString(16),
 											depsHash: file.meta.depsHash.toString(16),
 											nameHash: file.meta.nameHash.toString(16),
-											requires: file.meta.requires
+											requires: file.meta.requires,
+                                            mtime: file.meta.mtime
 										};
 										filtered.push(file.pathname);
 										nextFile(i + 1);
Index: deploy/node_modules/ucc/lib/compiler.js
===================================================================
--- deploy/node_modules/ucc/lib/compiler.js	(revision 729031)
+++ deploy/node_modules/ucc/lib/compiler.js	(working copy)
@@ -15,6 +15,7 @@
 
 			this._reader = config.reader;
 			this._writer = config.writer;
+            this._mtime = config.mtime;
 			this._options = config.options || {};
 
 			this._cache = {};
@@ -91,7 +92,8 @@
 					} else {
 						file.meta = {
 							dependencies: [],
-							requires: []
+							requires: [],
+                            mtime: self._mtime
 						};
 
 						self._dispatch(file, function () {
Index: deploy/node_modules/tianma-unicorn/lib/unicorn.js
===================================================================
--- deploy/node_modules/tianma-unicorn/lib/unicorn.js	(revision 729031)
+++ deploy/node_modules/tianma-unicorn/lib/unicorn.js	(working copy)
@@ -63,7 +63,7 @@
 						'content-type': util.mime(url.type),
 						'expires': new Date(now.getTime() + 1000 * expires).toGMTString(),
 						'cache-control': 'max-age=' + expires,
-						'last-modified': now.toGMTString(),
+						'last-modified': mtime.toGMTString(),
 						'etag': stamp,
 						'vary': 'Accept-Encoding'
 					}, self._refine(url.type, self._combine(files)));
Index: deploy/node_modules/ucc/bin/ucc
===================================================================
--- deploy/node_modules/ucc/bin/ucc	(revision 729031)
+++ deploy/node_modules/ucc/bin/ucc	(working copy)
@@ -13,6 +13,7 @@
 	 * @param config {Object}
 	 */
 	initiate = function (config) {
+
 		source = new Source({
 			patch: config.patch,
 			root: config.source
@@ -22,7 +23,7 @@
 			root: config.target
 		});
 
-		var options = source.read('unicorn.json');
+		var options = source.read('unicorn.json'),uconfig;
 
 		if (options === null) {
 			console.error('Cannot find unicorn.json');
@@ -36,6 +37,19 @@
 			process.exit(1);
 		}
 
+		try{
+        	uconfig = JSON.parse(uconfig.data.toString('utf-8'));
+        } catch (err) {
+        	uconfig = null;
+        }
+
+
+        if (uconfig){
+        	mtime = uconfig.mtime;
+        } else {
+        	mtime = new Date().getTime();
+        }
+
 		compiler = new Compiler({
 			options: {
 				'modular': {
@@ -64,7 +78,8 @@
 				}
 
 				callback();
-			}
+			},
+			mtime: mtime
 		});
 
 		compiler
@@ -72,7 +87,7 @@
 				'decode', 'dependency', 'nocomment',
 				'modular', 'stamp', 'minify', 'encode' ])
 			.mount('.css', [
-				'decode', 'dependency', 'minify', 'encode' ])
+				'decode', 'dependency', 'stamp', 'minify', 'encode' ])
 			.mount('.json', [
 				'decode', 'json', 'encode' ])
 			.mount('.tpl', [
@@ -129,12 +144,13 @@
 					compiler.errors.push('Cannot compile file: "' + pathname + '"');
 				} else {
 					m = files[i].meta;
-					if (/\.(?:js|css)$/.test(pathname)) {
+					if (/\.(?:js|css|png|jpeg|jpg|gif)$/.test(pathname)) {
 						meta[pathname] = {
 							dataHash: m.dataHash.toString(16),
 							depsHash: m.depsHash.toString(16),
 							nameHash: m.nameHash.toString(16),
-							requires: m.requires
+							requires: m.requires,
+							mtime: m.mtime
 						};
 					}
 						
